{"version":3,"sources":["selectors.ts","effects.ts","store.ts","reducer.ts","style.ts","App.tsx","index.tsx"],"names":["selectUser","createSelector","state","users","active","login","find","user","selectSearch","search","selectNotification","notification","rootSaga","getUserSaga","getPredictionsSaga","takeLatest","payload","delay","select","call","a","fetch","then","throwIfNot200","r","json","put","type","message","race","take","predictions","items","map","id","response","status","Error","statusText","persistConfig","key","storage","sagaMiddleware","createSagaMiddleware","persistedReducer","persistReducer","prediction","action","produce","draft","push","store","createStore","composeWithDevTools","applyMiddleware","persistor","persistStore","useTypedSelector","useSelector","useTypedDispatch","useDispatch","run","Prediction","styled","button","Input","input","Space","div","Row","Column","UserWrapper","Avatar","img","Search","children","dispatch","value","placeholder","onChange","e","target","ActiveUser","activeUser","UserCard","onClick","height","width","style","transform","src","avatar_url","alt","Predictions","length","overflow","display","flexDirection","History","history","filter","alignItems","Notification","position","top","right","background","padding","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a9f8d6f1.chunk.js","sourcesContent":["import { State } from \"./reducer\";\nimport { createSelector } from \"reselect\";\n\nexport const selectUser = createSelector(\n  (state: State) => state.users,\n  (state: State) => state.active,\n  (users, login) => users.find(user => user.login === login)\n);\n\nexport const selectSearch = createSelector(\n  (state: State) => state.search,\n  search => search\n);\n\nexport const selectNotification = createSelector(\n  (state: State) => state.notification,\n  notification => notification\n);\n","import {\n  delay,\n  call,\n  put,\n  takeLatest,\n  select,\n  take,\n  race\n} from \"redux-saga/effects\";\nimport { Action } from \"./actions\";\nimport { selectSearch } from \"./selectors\";\nimport { User } from \"./reducer\";\n\nexport function* rootSaga() {\n  yield takeLatest(\"search updated\", getPredictionsSaga);\n  yield takeLatest(\"active user changed\", getUserSaga);\n}\n\nfunction* getUserSaga({ payload }: any) {\n  // debounce for those trigger happy users.\n  yield delay(333);\n  const user = yield select(state =>\n    state.users.find((user: User) => user.login === payload)\n  );\n  if (user) return;\n  try {\n    const user = yield call(async login => {\n      return fetch(`https://api.github.com/users/${login}`)\n        .then(throwIfNot200)\n        .then(r => r.json());\n    }, payload);\n    yield put<Action>({\n      type: \"user loaded\",\n      payload: user\n    });\n  } catch (error) {\n    yield put<Action>({\n      type: \"notification updated\",\n      payload: {\n        message: error.message,\n        type: \"error\"\n      }\n    });\n    yield race([delay(3000), take(\"notification clicked\")]);\n    yield;\n    yield put<Action>({\n      type: \"notification updated\",\n      payload: null\n    });\n  }\n}\n\nfunction* getPredictionsSaga() {\n  try {\n    yield delay(333);\n    const search = yield select(selectSearch);\n    const predictions = yield call(async search => {\n      return fetch(`https://api.github.com/search/users?q=${search}`)\n        .then(throwIfNot200)\n        .then(r => r.json());\n    }, search);\n    yield put<Action>({\n      type: \"prediction loaded\",\n      payload: predictions.items.map(({ id, login }: any) => ({ id, login }))\n    });\n  } catch (error) {\n    yield put<Action>({\n      type: \"prediction loaded\",\n      payload: []\n    });\n  }\n}\n\nconst throwIfNot200 = (response: Response) => {\n  if (response.status === 200) {\n    return response;\n  } else {\n    throw new Error(response.statusText);\n  }\n};\n","import { createStore, applyMiddleware, Dispatch } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { TypedUseSelectorHook, useSelector, useDispatch } from \"react-redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport { reducer, State } from \"./reducer\";\nimport { Action } from \"./actions\";\nimport { rootSaga } from \"./effects\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage\n};\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nexport const store = createStore<any, Action, unknown, unknown>(\n  persistedReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\nexport const persistor = persistStore(store);\n\nexport const useTypedSelector = useSelector as TypedUseSelectorHook<State>;\n\nexport const useTypedDispatch = useDispatch as () => Dispatch<Action>;\n\nsagaMiddleware.run(rootSaga);\n","import { produce } from \"immer\";\nimport { Action } from \"./actions\";\n\nexport type Prediction = { id: string; login: string };\nexport type User = any;\nexport const notificationType = [\"error\", \"success\"] as const;\nexport type NotificationType = typeof notificationType[number];\n\nexport type State = {\n  search: string;\n  prediction: Prediction[];\n  users: User[];\n  active: string | null;\n  notification: {\n    message: string;\n    type: NotificationType;\n  } | null;\n};\n\nconst iniitalState = (): State => ({\n  search: \"\",\n  prediction: [],\n  users: [],\n  active: null,\n  notification: null\n});\n\nexport const reducer = (state: State = iniitalState(), action: Action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case \"user loaded\": {\n        draft.users.push(action.payload);\n        break;\n      }\n      case \"prediction loaded\": {\n        draft.prediction = action.payload;\n        break;\n      }\n      case \"active user changed\": {\n        draft.active = action.payload;\n        draft.search = \"\";\n        draft.prediction = [];\n        break;\n      }\n      case \"search updated\": {\n        draft.search = action.payload;\n        break;\n      }\n      case \"notification updated\": {\n        draft.notification = action.payload;\n        break;\n      }\n      case \"notification clicked\": {\n        draft.notification = null;\n        break;\n      }\n    }\n  });\n};\n","import styled from \"styled-components\";\n\nexport const Prediction = styled.button`\n  background-color: rgba(255, 255, 255, 0.3);\n  box-sizing: border-box;\n  width: 100%;\n  color: rgb(255, 255, 255);\n  font-size: 1rem;\n  border: none;\n  padding: 1rem;\n  transition: border 0.3s ease 0s;\n  &:hover {\n    background: rgb(96, 24, 65);\n  }\n`;\n\nexport const Input = styled.input`\n  background-color: rgba(255, 255, 255, 0.3);\n  box-sizing: border-box;\n  width: 100%;\n  color: rgb(255, 255, 255);\n  font-size: 1rem;\n  border-width: 2px;\n  border-style: solid;\n  border-image: initial;\n  border-radius: 4px;\n  padding: 1rem;\n  transition: border 0.3s ease 0s;\n  outline: 0px;\n  border-color: rgba(255, 255, 255, 0.5);\n  &::placeholder {\n    color: rgba(255, 255, 255, 0.58);\n  }\n`;\n\nexport const Space = styled.div`\n  flex: 0 0 10px;\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  overflow: auto;\n  white-space: nowrap;\n`;\n\nexport const Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n`;\n\nexport const UserWrapper = styled(Column)`\n  padding: 20px;\n  border-radius: 5;\n  padding-top: 50px;\n  justify-content: center;\n  align-items: center;\n  background: rgba(0, 0, 0, 0.2);\n`;\n\nexport const Avatar = styled.img`\n  border-radius: 100%;\n  border: 2px solid white;\n  box-shadow: 0 0 0 2px black;\n`;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { store, useTypedSelector, useTypedDispatch, persistor } from \"./store\";\nimport { selectUser, selectSearch, selectNotification } from \"./selectors\";\nimport { User } from \"./reducer\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport {\n  Prediction,\n  Input,\n  Space,\n  Row,\n  Column,\n  UserWrapper,\n  Avatar\n} from \"./style\";\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <Notification />\n        <div className=\"App\">\n          <Search>\n            <Predictions />\n          </Search>\n          <Space />\n          <ActiveUser />\n          <History />\n        </div>\n      </PersistGate>\n    </Provider>\n  );\n};\n\nconst Search: React.FC = ({ children }) => {\n  const dispatch = useTypedDispatch();\n  const search = useTypedSelector(selectSearch);\n  return (\n    <Column>\n      <Input\n        type=\"text\"\n        value={search}\n        placeholder=\"Start typing a user login\"\n        onChange={e =>\n          void dispatch({ type: \"search updated\", payload: e.target.value })\n        }\n      />\n      {children}\n    </Column>\n  );\n};\n\nconst ActiveUser = () => {\n  const activeUser = useTypedSelector(selectUser);\n  return activeUser ? <UserCard user={activeUser} /> : null;\n};\n\nconst UserCard: React.FC<{ user: User; onClick?: () => void }> = ({\n  user,\n  onClick\n}) => {\n  return user ? (\n    <UserWrapper\n      onClick={() => {\n        if (onClick) onClick();\n      }}\n    >\n      <Avatar\n        height={50}\n        width={50}\n        style={{\n          transform: \"translateY(-50%)\"\n        }}\n        src={user.avatar_url}\n        alt=\"user\"\n      />\n      <h2> {user.login}</h2>\n    </UserWrapper>\n  ) : null;\n};\n\nconst Predictions: React.FC = () => {\n  const dispatch = useTypedDispatch();\n  const predictions = useTypedSelector(state => state.prediction);\n  return predictions.length ? (\n    <div\n      style={{\n        height: 200,\n        overflow: \"auto\",\n        display: \"flex\",\n        flexDirection: \"column\"\n      }}\n    >\n      {predictions.map(prediction => (\n        <Prediction\n          key={prediction.id}\n          onClick={() =>\n            void dispatch({\n              type: \"active user changed\",\n              payload: prediction.login\n            })\n          }\n        >\n          {prediction.login}\n        </Prediction>\n      ))}\n    </div>\n  ) : null;\n};\n\nconst History: React.FC = () => {\n  const dispatch = useTypedDispatch();\n  const history = useTypedSelector(state =>\n    state.users.filter(user => user.login !== state.active)\n  );\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\"\n      }}\n    >\n      <h2>History</h2>\n      <Row>\n        {history.map(user => (\n          <>\n            <UserCard\n              user={user}\n              onClick={() =>\n                void dispatch({\n                  type: \"active user changed\",\n                  payload: user.login\n                })\n              }\n            />\n            <Space />\n          </>\n        ))}\n      </Row>\n    </div>\n  );\n};\n\nconst Notification: React.FC = () => {\n  const dispatch = useTypedDispatch();\n  const notification = useTypedSelector(selectNotification);\n  return notification ? (\n    <div\n      onClick={() => void dispatch({ type: \"notification clicked\" })}\n      style={{\n        position: \"fixed\",\n        top: 5,\n        right: 5,\n        background: notification.type === \"error\" ? \"red\" : \"green\",\n        padding: 20\n      }}\n    >\n      {notification.message}\n    </div>\n  ) : null;\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}